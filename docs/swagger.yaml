basePath: /
definitions:
  models.CreateUserRequest:
    properties:
      name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - name
    - password
    - username
    type: object
  models.Todo:
    properties:
      completed:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
  models.TodoRequest:
    properties:
      completed:
        type: boolean
      description:
        type: string
      title:
        type: string
      user_id:
        type: string
    required:
    - title
    type: object
  models.UpdateUserRequest:
    properties:
      id:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      todos:
        items:
          $ref: '#/definitions/models.Todo'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserResponse:
    properties:
      id:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: REST API for working with todo's
  title: ToDo App API
  version: "1.0"
paths:
  /todos:
    get:
      consumes:
      - application/json
      description: Retrieve all todo items from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: Create a new todo task with title, description and completion status
      parameters:
      - description: Todo data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.TodoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new todo
      tags:
      - todos
  /todos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a todo by its ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a todo
      tags:
      - todos
    get:
      consumes:
      - application/json
      description: Retrieve a todo item by its ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get todo by ID
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: Update an existing todo's title or description
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated todo data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.TodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a todo
      tags:
      - todos
  /todos/{id}/toggle:
    patch:
      consumes:
      - application/json
      description: Mark todo as complete or incomplete
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Toggle todo completion
      tags:
      - todos
  /todos/user/{userID}:
    get:
      consumes:
      - application/json
      description: Retrieve all todos that belong to a specific user
      parameters:
      - description: User UUID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get todos by user ID
      tags:
      - todos
  /users:
    post:
      consumes:
      - application/json
      description: Register a new user with name, username, and password
      parameters:
      - description: User info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update name, username or password for a user
      parameters:
      - description: Updated user info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update user info
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user from database by their UUID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a user by their unique UUID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by ID
      tags:
      - users
  /users/{username}:
    get:
      consumes:
      - application/json
      description: Retrieve a user by Username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by Username
      tags:
      - users
swagger: "2.0"
